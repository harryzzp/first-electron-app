{
  "_args": [
    [
      "electron-prebuilt",
      ""
    ]
  ],
  "_from": "electron-prebuilt@*",
  "_id": "electron-prebuilt@0.37.5",
  "_inCache": true,
  "_location": "/electron-prebuilt",
  "_nodeVersion": "2.2.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/electron-prebuilt-0.37.5.tgz_1460004256934_0.7433052100241184"
  },
  "_npmUser": {
    "email": "max@maxogden.com",
    "name": "maxogden"
  },
  "_npmVersion": "2.14.6",
  "_phantomChildren": {},
  "_requested": {
    "name": "electron-prebuilt",
    "raw": "electron-prebuilt",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/electron-prebuilt/-/electron-prebuilt-0.37.5.tgz",
  "_shasum": "3a418982877815d3a7ac1f9b2e2f4a70f420ff70",
  "_shrinkwrap": null,
  "_spec": "electron-prebuilt",
  "_where": "",
  "author": {
    "name": "Mathias Buus"
  },
  "bin": {
    "electron": "cli.js"
  },
  "bugs": {
    "url": "https://github.com/electron-userland/electron-prebuilt/issues"
  },
  "dependencies": {
    "electron-download": "^2.0.0",
    "extract-zip": "^1.0.3"
  },
  "description": "Install electron prebuilt binaries for the command-line use using npm",
  "devDependencies": {
    "home-path": "^0.1.1",
    "path-exists": "^1.0.0",
    "standard": "^5.4.1",
    "tape": "^3.0.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "3a418982877815d3a7ac1f9b2e2f4a70f420ff70",
    "tarball": "https://registry.npmjs.org/electron-prebuilt/-/electron-prebuilt-0.37.5.tgz"
  },
  "homepage": "https://github.com/electron-userland/electron-prebuilt",
  "installable": true,
  "keywords": [],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "max@maxogden.com",
      "name": "maxogden"
    },
    {
      "email": "mathiasbuus@gmail.com",
      "name": "mafintosh"
    },
    {
      "email": "zcbenz@gmail.com",
      "name": "zcbenz"
    },
    {
      "email": "dave.des@gmail.com",
      "name": "mattdesl"
    }
  ],
  "name": "electron-prebuilt",
  "optionalDependencies": {},
  "readme": "# electron-prebuilt\r\n\r\n[![build status](http://img.shields.io/travis/electron-userland/electron-prebuilt.svg?style=flat)](http://travis-ci.org/electron-userland/electron-prebuilt)\r\n\r\n[![badge](https://nodei.co/npm/electron-prebuilt.png?downloads=true)](https://www.npmjs.com/package/electron-prebuilt)\r\n\r\nInstall [electron](https://github.com/atom/electron) prebuilt binaries for command-line use using npm. This module helps you easily install the `electron` command for use on the command line without having to compile anything.\r\n\r\nElectron is a JavaScript runtime that bundles Node.js and Chromium. You use it similar to the `node` command on the command line for executing JavaScript programs. For more info you can read [this intro blog post](http://maxogden.com/electron-fundamentals.html) or dive into the [Electron documentation](https://github.com/atom/electron/tree/master/docs)\r\n\r\n## Installation\r\n\r\nDownload and install the latest build of electron for your OS and add it to your projects `package.json` as a `devDependency`:\r\n\r\n```\r\nnpm install electron-prebuilt --save-dev\r\n```\r\n\r\nThis is the preferred way to use electron, as it doesn't require users to install electron globally.\r\n\r\nYou can also use the `-g` flag (global) to symlink it into your PATH:\r\n\r\n```\r\nnpm install -g electron-prebuilt\r\n```\r\n\r\nIf that command fails with an `EACCESS` error you may have to run it again with `sudo`:\r\n\r\n```\r\nsudo npm install -g electron-prebuilt\r\n```\r\n\r\nNow you can just run `electron` to run electron:\r\n\r\n```\r\nelectron\r\n```\r\n\r\nIf you need to use an HTTP proxy you can [set these environment variables](https://github.com/request/request/tree/f0c4ec061141051988d1216c24936ad2e7d5c45d#controlling-proxy-behaviour-using-environment-variables)\r\n\r\nIf you want to change the architecture that is downloaded (e.g., `ia32` on an `x64` machine), you can use the `--arch` flag with npm install or set the `npm_config_arch` environment variable:\r\n```\r\nnpm install --arch=ia32 electron-prebuilt\r\n```\r\n\r\n## About\r\n\r\nWorks on Mac, Windows and Linux OSes that Electron supports (e.g. Electron [does not support Windows XP](https://github.com/atom/electron/issues/691)).\r\n\r\nThe version numbers of this module match the version number of the [offical Electron releases](https://github.com/atom/electron/releases), which do not follow [semantic versioning](http://semver.org/).\r\n\r\nThis module is automatically released whenever a new version of Electron is released thanks to [electron-prebuilt-updater](https://github.com/johnmuhl/electron-prebuilt-updater) written by [John Muhl](https://github.com/johnmuhl/).\r\n\r\n## Usage\r\n\r\nFirst you have to [write an electron application](https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md)\r\n\r\nThen you can run your app using:\r\n\r\n```\r\nelectron your-app/\r\n```\r\n\r\n## Related modules\r\n\r\n- [electron-packager](https://github.com/electron-userland/electron-packager) - package and distribute your electron app in OS executables (.app, .exe etc)\r\n- [electron-builder](https://github.com/loopline-systems/electron-builder) - create installers for Windows and OS X. It's built to work together with electron-packager\r\n- [menubar](https://github.com/maxogden/menubar) - high level way to create menubar desktop applications with electron\r\n\r\nFind more at the [awesome-electron](https://github.com/sindresorhus/awesome-electron) list\r\n\r\n## Programmatic usage\r\n\r\nMost people use this from the command line, but if you require `electron-prebuilt` inside your node app it will return the file path to the binary.\r\nUse this to spawn electron from node scripts.\r\n\r\n``` js\r\nvar electron = require('electron-prebuilt')\r\nvar proc = require('child_process')\r\n\r\n// will something similar to print /Users/maf/.../Electron\r\nconsole.log(electron)\r\n\r\n// spawn electron\r\nvar child = proc.spawn(electron)\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/electron-userland/electron-prebuilt.git"
  },
  "scripts": {
    "cache-clean": "rm -rf ~/.electron && rm -rf dist",
    "postinstall": "node install.js",
    "pretest": "npm run cache-clean && node install.js",
    "test": "standard && tape test/*.js"
  },
  "version": "0.37.5"
}
